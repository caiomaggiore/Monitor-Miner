#!/usr/bin/env python3
"""
Diagn√≥stico ESP32 - Verifica se MicroPython est√° instalado corretamente
"""

import subprocess
import sys
import os

# Adicionar pasta pai ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Importar configura√ß√£o da porta
from port_config import ESP32_PORT

def run_cmd(cmd, timeout=10):
    """Executa comando e retorna resultado"""
    try:
        print(f"üîÑ {cmd}")
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=timeout)
        
        print(f"üì§ Return code: {result.returncode}")
        if result.stdout.strip():
            print(f"üì§ Sa√≠da: {result.stdout.strip()}")
        if result.stderr.strip():
            print(f"üì§ Erro: {result.stderr.strip()}")
        
        return result.returncode == 0
    except Exception as e:
        print(f"üí• Erro: {e}")
        return False

def check_micropython():
    """Verifica se MicroPython est√° instalado"""
    print("üêç Verificando MicroPython...")
    
    # Teste 1: Vers√£o do Python
    if not run_cmd(f'python -m mpremote connect {ESP32_PORT} exec "import sys; print(sys.version)"'):
        print("‚ùå MicroPython n√£o responde corretamente")
        return False
    
    # Teste 2: M√≥dulos b√°sicos
    if not run_cmd(f'python -m mpremote connect {ESP32_PORT} exec "import os; print(\\"OS module OK\\")"'):
        print("‚ùå M√≥dulo OS n√£o funciona")
        return False
    
    # Teste 3: Filesystem
    if not run_cmd(f'python -m mpremote connect {ESP32_PORT} exec "import os; print(\\"Files:\\", os.listdir(\\".\\"))"'):
        print("‚ùå Filesystem n√£o funciona")
        return False
    
    print("‚úÖ MicroPython est√° funcionando!")
    return True

def check_files():
    """Verifica arquivos no ESP32"""
    print("\nüìÅ Verificando arquivos...")
    
    # Listar arquivos via Python
    if run_cmd(f'python -m mpremote connect {ESP32_PORT} exec "import os; files = os.listdir(\\".\\"); print(\\"Arquivos:\\", files); print(\\"Total:\\", len(files))"'):
        print("‚úÖ Listagem via Python funcionou")
    else:
        print("‚ùå Erro na listagem via Python")
    
    # Testar se arquivos espec√≠ficos existem
    files_to_check = ["main.py", "boot.py", "hardware", "services", "web"]
    
    for file in files_to_check:
        cmd = f'python -m mpremote connect {ESP32_PORT} exec "import os; print(\\"{file} existe:\\", os.path.exists(\\"{file}\\"))"'
        run_cmd(cmd)

def check_memory():
    """Verifica mem√≥ria dispon√≠vel"""
    print("\nüíæ Verificando mem√≥ria...")
    
    # Espa√ßo livre
    run_cmd(f'python -m mpremote connect {ESP32_PORT} exec "import os; stat = os.statvfs(\\"/\\"); free = stat[3] * stat[0]; print(\\"Espa√ßo livre:\\", free, \\"bytes\\")"')
    
    # Mem√≥ria RAM
    run_cmd(f'python -m mpremote connect {ESP32_PORT} exec "import gc; print(\\"RAM livre:\\", gc.mem_free(), \\"bytes\\")"')

def main():
    print("üîç Diagn√≥stico ESP32 - Monitor Miner v2.0")
    print("=" * 50)
    
    # Verificar MicroPython
    if not check_micropython():
        print("\n‚ùå PROBLEMA: MicroPython n√£o est√° funcionando corretamente")
        print("üí° Solu√ß√µes:")
        print("1. Reinstalar MicroPython no ESP32")
        print("2. Verificar se ESP32 n√£o est√° em modo bootloader")
        print("3. Tentar outro cabo USB")
        return False
    
    # Verificar arquivos
    check_files()
    
    # Verificar mem√≥ria
    check_memory()
    
    print("\nüéâ DIAGN√ìSTICO CONCLU√çDO!")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Cancelado")
        sys.exit(1)
