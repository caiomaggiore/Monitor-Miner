{
  "project": "Monitor Miner",
  "version": "4.0.0",
  "codename": "Modular Architecture",
  "release_date": "2025-10-23",
  "status": "development",
  "type": "major",
  "semver": {
    "major": 4,
    "minor": 0,
    "patch": 0,
    "build": 400
  },
  "git": {
    "branch": "v4.0",
    "commit": "",
    "tag": "v4.0.0"
  },
  "compatibility": {
    "hardware": ["ESP32-WROOM-32D 38pin"],
    "micropython": ">=1.20",
    "min_ram": "150KB",
    "min_flash": "2MB"
  },
  "features": {
    "core": [
      "Arquitetura Modular (core/, services/, controllers/)",
      "Servidor HTTP Unificado",
      "Sistema de Roteamento Avançado",
      "Services Independentes",
      "Controllers Orquestradores",
      "Componentes UI Reutilizáveis",
      "Cache de Arquivos Estáticos",
      "CORS Automático",
      "Middleware Pipeline"
    ],
    "sensors": {
      "supported": ["DHT22", "DHT11", "ACS712 Current", "Relay Control", "Exaustor Control"],
      "implemented": [],
      "planned": ["DHT22", "DHT11", "ACS712", "Relay"]
    },
    "network": {
      "modes": ["AP", "STA"],
      "protocols": ["HTTP/1.1"],
      "ports": [8080]
    }
  },
  "changes": {
    "added": [
      "Arquitetura modular completa (core/, services/, controllers/)",
      "Core modules: http_server.py, router.py, response.py",
      "Services: system_monitor.py, data_store.py",
      "Controllers: dashboard_controller.py, config_controller.py",
      "Componentes UI reutilizáveis (web/js/core/)",
      "Sistema de roteamento HTTP avançado",
      "Cache de arquivos estáticos",
      "Validação de dados JSON",
      "CORS automático",
      "Middleware pipeline"
    ],
    "fixed": [
      "Zero duplicação de código",
      "Services independentes e reutilizáveis",
      "Controllers como orquestradores",
      "UI components modulares",
      "Arquitetura escalável para novos módulos"
    ],
    "changed": [
      "Versão atualizada para 4.0.0",
      "Arquitetura completamente refatorada",
      "main.py -> main_v4.py com nova arquitetura",
      "Services independentes (system_monitor, data_store)",
      "Controllers orquestram services",
      "UI components reutilizáveis",
      "Sistema de roteamento HTTP",
      "Cache inteligente de arquivos"
    ]
  },
  "security": [
    "Watchdog protege contra travamentos indefinidos",
    "Validação de dados JSON",
    "CORS configurado automaticamente"
  ],
  "known_issues": [
    {
      "id": "KI-001",
      "severity": "low",
      "description": "Sensores ainda não implementados (TODOs no código)",
      "workaround": "APIs retornam dados mock",
      "planned_fix": "4.1.0"
    },
    {
      "id": "KI-002",
      "severity": "low",
      "description": "Sem autenticação no dashboard",
      "workaround": "Usar apenas em redes confiáveis",
      "planned_fix": "4.1.0"
    },
    {
      "id": "KI-003",
      "severity": "low",
      "description": "Gráficos ainda não implementados",
      "workaround": "Placeholders visuais",
      "planned_fix": "4.1.0"
    }
  ],
  "dependencies": {
    "runtime": [
      "MicroPython",
      "network (built-in)",
      "socket (built-in)",
      "json (built-in)",
      "gc (built-in)",
      "time (built-in)",
      "machine (built-in)"
    ],
    "optional": [
      "memory_optimizer.py",
      "system_monitor_simple.py"
    ]
  },
  "performance": {
    "memory_usage": "~120KB base",
    "cpu_usage": "<5% idle",
    "response_time": "<100ms",
    "concurrent_connections": 5
  },
  "installation": {
    "steps": [
      "1. Flash MicroPython no ESP32",
      "2. Upload arquivos via mpremote",
      "3. Conectar à rede WiFi",
      "4. Acessar http://[IP]:8080"
    ],
    "requirements": [
      "ESP32 com MicroPython",
      "Conexão WiFi",
      "Navegador web"
    ]
  },
  "api": {
    "endpoints": {
      "dashboard": [
        "GET / - Página principal",
        "GET /api/status - Status do sistema",
        "GET /api/sensors - Dados dos sensores"
      ],
      "config": [
        "GET /config - Página de configuração",
        "GET /api/config - Configuração geral",
        "POST /api/config - Atualizar configuração",
        "GET /api/sensors/config - Configuração de sensores",
        "POST /api/sensors - Adicionar sensor",
        "DELETE /api/sensors/{id} - Remover sensor"
      ]
    },
    "authentication": "Nenhuma (rede local)",
    "cors": "Habilitado para todos os origins"
  },
  "development": {
    "architecture": "Modular (MVC-like)",
    "core_modules": ["http_server", "router", "response"],
    "services": ["system_monitor", "data_store"],
    "controllers": ["dashboard", "config"],
    "ui_components": ["components", "dashboard"],
    "testing": "Manual (ESP32 real)",
    "debugging": "Serial console + logs"
  },
  "roadmap": {
    "4.1.0": [
      "Implementação de sensores reais",
      "Gráficos em tempo real",
      "Autenticação básica"
    ],
    "4.2.0": [
      "WebSocket para updates em tempo real",
      "Histórico de dados",
      "Alertas e notificações"
    ],
    "5.0.0": [
      "Interface mobile responsiva",
      "API REST completa",
      "Integração com serviços externos"
    ]
  },
  "team": {
    "maintainer": "Monitor Miner Team",
    "contributors": [],
    "license": "Proprietary"
  },
  "metadata": {
    "created": "2025-10-17T00:00:00Z",
    "updated": "2025-10-23T00:00:00Z",
    "schema_version": "1.0.0",
    "generator": "AI Assistant"
  }
}